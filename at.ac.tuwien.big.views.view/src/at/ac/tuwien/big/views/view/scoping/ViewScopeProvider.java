/*
 * generated by Xtext
 */
package at.ac.tuwien.big.views.view.scoping;

import java.util.ArrayList;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import at.ac.tuwien.big.views.Class;
import at.ac.tuwien.big.views.ClassOperationView;
import at.ac.tuwien.big.views.Property;
import at.ac.tuwien.big.views.Table;
import at.ac.tuwien.big.views.Type;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class ViewScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		return super.getScope(context, reference);
	}
	
	/*
	 * A property element has to reference a property of the class that
	 * is referenced by the view containing the property element. The
	 * referenced property is either defined by the class that is references
	 * by the view or inherited by this class from its super classes.
	 */
	public IScope scope_PropertyElement_property(ClassOperationView view, EReference reference) {
		
		ArrayList<Property> properties = new ArrayList<Property>();
		
		addProperties(properties, view.getClass_());
		
		return Scopes.scopeFor(properties);
	}
	
	/*
	 * Helper method to add the properties recursively
	 */
	private void addProperties(ArrayList<Property> properties, Class clas) {
		
		properties.addAll(clas.getProperties());
		
		if(clas.getSuperClass() != null) {
			addProperties(properties, clas.getSuperClass());
		}
	}
	
	/*
	 * A column of a table can only reference a property of the class
	 * that is the type of the navigable association end of the association
	 * that is referenced by the table. Again, the referenced property is
	 * either defined by the class that serves as type of the navigable
	 * association end or inherited from its super classes.
	 */
	public IScope scope_PropertyElement_property(Table table, EReference reference) {
		
		ArrayList<Property> properties = new ArrayList<Property>();
		
		Type typ = table.getAssociation().getNavigableEnd().getType();
		
		if(typ instanceof Class){
			addProperties(properties, (Class) typ);
		}
		
		return Scopes.scopeFor(properties);
	}
	
}
